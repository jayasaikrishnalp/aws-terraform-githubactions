name: CI Demo

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION || 'us-west-2' }}

      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Initialize Terraform with S3 Backend
        run: |
          terraform init \
            -backend-config="bucket=your-terraform-state-bucket" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION || 'us-west-2' }}"

      - name: Import Existing IAM Role
        run: |
          ROLE_ARN=$(aws iam get-role --role-name lambda_execution_role --query 'Role.Arn' --output text)
          terraform import aws_iam_role.lambda_role $ROLE_ARN

      - name: Import Existing IAM Policy
        run: |
          POLICY_ARN=$(aws iam list-policies --scope Local --query "Policies[?PolicyName=='lambda_logging_policy'].Arn" --output text)
          terraform import aws_iam_policy.lambda_logging $POLICY_ARN

      - name: Import Existing Lambda Function
        run: |
          FUNCTION_ARN=$(aws lambda get-function --function-name ${{ vars.LAMBDA_FUNCTION_NAME }} --query 'Configuration.FunctionArn' --output text)
          terraform import aws_lambda_function.example_lambda $FUNCTION_ARN

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan

      - name: Terraform Show
        run: terraform show
